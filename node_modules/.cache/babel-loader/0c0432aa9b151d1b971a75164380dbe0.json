{"ast":null,"code":"var _jsxFileName = \"/Users/simsujeong/Desktop/BUWebProgramGroup5-test/src/List.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Movie from \"./Movie\";\nclass List extends Component {\n  constructor(props) {\n    super(props);\n    this.getMovies = async () => {\n      // 오픈API 값 받기\n      const {\n        date\n      } = this.state;\n      const url = \"http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=f6075493e17d4525078a94b31ec0ef70&targetDt=\" + date;\n      const {\n        data: {\n          boxOfficeResult: {\n            dailyBoxOfficeList\n          }\n        }\n      } = await axios.get(url);\n      this.setState({\n        movies: dailyBoxOfficeList,\n        isSelect: false\n      });\n    };\n    this.handleMovieClick = movieCd => {\n      this.setState({\n        selectedMovieCd: movieCd\n      });\n    };\n    this.state = {\n      isSelect: true,\n      // 현재 로딩 여부\n      date: props.date,\n      // App.js의 date 값\n      movies: [],\n      // 영화 리스트 저장\n      selectedMovieCd: null // 선택된 영화 코드\n    };\n  }\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const {\n      isSelect,\n      movies,\n      selectedMovieCd\n    } = this.state;\n\n    // 영화 상세 정보를 클릭한 경우, 선택된 영화만 표시하고 나머지는 숨깁니다.\n    const filteredMovies = selectedMovieCd ? movies.filter(movie => movie.movieCd === selectedMovieCd) : movies;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, isSelect ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, \"\\uB85C\\uB529\\uC911\\uC785\\uB2C8\\uB2E4.\")) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, filteredMovies.map(movie => /*#__PURE__*/React.createElement(Movie, {\n      key: movie.movieCd,\n      moviecd: movie.movieCd,\n      title: movie.movieNm,\n      audiCnt: movie.audiCnt,\n      rank: movie.rank,\n      onClick: this.handleMovieClick // 영화를 클릭하면 해당 영화만 표시하도록 핸들러 전달\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }))), selectedMovieCd && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"\\uC0C1\\uC138 \\uC815\\uBCF4\")));\n  }\n}\nexport default List;","map":{"version":3,"names":["React","Component","axios","Movie","List","constructor","props","getMovies","date","state","url","data","boxOfficeResult","dailyBoxOfficeList","get","setState","movies","isSelect","handleMovieClick","movieCd","selectedMovieCd","componentDidMount","render","filteredMovies","filter","movie","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","key","moviecd","title","movieNm","audiCnt","rank","onClick"],"sources":["/Users/simsujeong/Desktop/BUWebProgramGroup5-test/src/List.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Movie from \"./Movie\";\r\n\r\nclass List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isSelect: true, // 현재 로딩 여부\r\n      date: props.date, // App.js의 date 값\r\n      movies: [], // 영화 리스트 저장\r\n      selectedMovieCd: null // 선택된 영화 코드\r\n    }\r\n  }\r\n\r\n  getMovies = async () => { // 오픈API 값 받기\r\n    const { date } = this.state;\r\n    const url = \"http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=f6075493e17d4525078a94b31ec0ef70&targetDt=\" + date;\r\n\r\n    const { data: { boxOfficeResult: { dailyBoxOfficeList } } } = await axios.get(url);\r\n    this.setState({ movies: dailyBoxOfficeList, isSelect: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n\r\n  handleMovieClick = (movieCd) => {\r\n    this.setState({ selectedMovieCd: movieCd });\r\n  }\r\n\r\n  render() {\r\n    const { isSelect, movies, selectedMovieCd } = this.state;\r\n\r\n    // 영화 상세 정보를 클릭한 경우, 선택된 영화만 표시하고 나머지는 숨깁니다.\r\n    const filteredMovies = selectedMovieCd ? movies.filter(movie => movie.movieCd === selectedMovieCd) : movies;\r\n\r\n    return (\r\n      <div>\r\n        {/* 영화 리스트 */}\r\n        {isSelect ? (\r\n          <div>\r\n            <h2>로딩중입니다.</h2>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            {filteredMovies.map((movie) => (\r\n              <Movie\r\n                key={movie.movieCd}\r\n                moviecd={movie.movieCd}\r\n                title={movie.movieNm}\r\n                audiCnt={movie.audiCnt}\r\n                rank={movie.rank}\r\n                onClick={this.handleMovieClick} // 영화를 클릭하면 해당 영화만 표시하도록 핸들러 전달\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {/* 상세 정보 */}\r\n        {selectedMovieCd && (\r\n          <div>\r\n            <h3>상세 정보</h3>\r\n            {/* 상세 정보 표시 내용 */}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,IAAI,SAASH,SAAS,CAAC;EAC3BI,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KASfC,SAAS,GAAG,YAAY;MAAE;MACxB,MAAM;QAAEC;MAAK,CAAC,GAAG,IAAI,CAACC,KAAK;MAC3B,MAAMC,GAAG,GAAG,wIAAwI,GAAGF,IAAI;MAE3J,MAAM;QAAEG,IAAI,EAAE;UAAEC,eAAe,EAAE;YAAEC;UAAmB;QAAE;MAAE,CAAC,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACJ,GAAG,CAAC;MAClF,IAAI,CAACK,QAAQ,CAAC;QAAEC,MAAM,EAAEH,kBAAkB;QAAEI,QAAQ,EAAE;MAAM,CAAC,CAAC;IAChE,CAAC;IAAA,KAMDC,gBAAgB,GAAIC,OAAO,IAAK;MAC9B,IAAI,CAACJ,QAAQ,CAAC;QAAEK,eAAe,EAAED;MAAQ,CAAC,CAAC;IAC7C,CAAC;IAtBC,IAAI,CAACV,KAAK,GAAG;MACXQ,QAAQ,EAAE,IAAI;MAAE;MAChBT,IAAI,EAAEF,KAAK,CAACE,IAAI;MAAE;MAClBQ,MAAM,EAAE,EAAE;MAAE;MACZI,eAAe,EAAE,IAAI,CAAC;IACxB,CAAC;EACH;EAUAC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACd,SAAS,CAAC,CAAC;EAClB;EAMAe,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEL,QAAQ;MAAED,MAAM;MAAEI;IAAgB,CAAC,GAAG,IAAI,CAACX,KAAK;;IAExD;IACA,MAAMc,cAAc,GAAGH,eAAe,GAAGJ,MAAM,CAACQ,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACN,OAAO,KAAKC,eAAe,CAAC,GAAGJ,MAAM;IAE3G,oBACEhB,KAAA,CAAA0B,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAEGf,QAAQ,gBACPjB,KAAA,CAAA0B,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACEhC,KAAA,CAAA0B,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAI,uCAAW,CACZ,CAAC,gBAENhC,KAAA,CAAA0B,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACGT,cAAc,CAACU,GAAG,CAAER,KAAK,iBACxBzB,KAAA,CAAA0B,aAAA,CAACvB,KAAK;MACJ+B,GAAG,EAAET,KAAK,CAACN,OAAQ;MACnBgB,OAAO,EAAEV,KAAK,CAACN,OAAQ;MACvBiB,KAAK,EAAEX,KAAK,CAACY,OAAQ;MACrBC,OAAO,EAAEb,KAAK,CAACa,OAAQ;MACvBC,IAAI,EAAEd,KAAK,CAACc,IAAK;MACjBC,OAAO,EAAE,IAAI,CAACtB,gBAAiB,CAAC;MAAA;MAAAS,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACjC,CACF,CACE,CACN,EAGAZ,eAAe,iBACdpB,KAAA,CAAA0B,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACEhC,KAAA,CAAA0B,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAI,2BAAS,CAEV,CAEJ,CAAC;EAEV;AACF;AAEA,eAAe5B,IAAI"},"metadata":{},"sourceType":"module"}